module.exports = function(grunt) {

    // Project configuration.
    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),

        paths: {
            src:   'source',
            dist:  'dist',
            bower: 'bower_components'
        },

        // Configuration for deleting files
        clean: {
            options: {
                force: true
            },
            dist: {
                files: [
                    {
                        src: ['<%= paths.dist %>']
                    }
                ]
            },
            css: {
                files: [
                    {
                        src: ['<%= paths.dist %>/css']
                    }
                ]
            },
            images: {
                files: [
                    {
                        src: ['<%= paths.dist %>/images']
                    }
                ]
            }
        },
        
        //assemble
        assemble: {
            options: {
                data: ['<%= paths.src %>/assemble/data/**/*.{json,yml}'],
                helpers: ['<%= paths.src %>/assemble/helpers/**/*.js'],
                layoutdir: '<%= paths.src %>/assemble/layouts/',
                partials: ['<%= paths.src %>/assemble/partials/**/*.hbs'],
                currentTimestamp: (new Date()).getTime(),
                settings: {
                    ui: {
                        path: './'
                    },
                    routing: {
                        prefix: './'
                    }
                }
            },
            dist: {
                options: {
                    production: true
                },
                files: [
                    {
                        cwd: '<%= paths.src %>/assemble/pages/default/',
                        dest: '<%= paths.dist %>/',
                        expand: true,
                        flatten: true,
                        src: ['*.hbs']
                    }
                ]
            },
            modal: {
                options: {
                    production: true
                },
                files: [
                    {
                        cwd: '<%= paths.src %>/assemble/pages/modal/',
                        dest: '<%= paths.dist %>/modal/',
                        expand: true,
                        flatten: true,
                        src: ['*.hbs']
                    }
                ]
            },
            item: {
                options: {
                    production: true
                },
                files: [
                    {
                        cwd: '<%= paths.src %>/assemble/pages/item/',
                        dest: '<%= paths.dist %>/item/',
                        expand: true,
                        flatten: true,
                        src: ['*.hbs']
                    }
                ]
            }
        },

        // Configuration for prettifying the html-code generated by assemble
        prettify: {
            options: {
                condense: false,
                indent: 1,
                indent_char: '    ',
                indent_inner_html: false,
                max_preserve_newlines: 1,
                preserve_newlines: true,
                unformatted: [
                    "a",
                    "b",
                    "code",
                    "em",
                    "i",
                    "mark",
                    "strong",
                    "pre"
                ]
            },
            dist: {
                options: {
                    brace_style: 'collapse'
                },
                files: [
                    {
                        cwd: '<%= paths.dist %>/',
                        dest: '<%= paths.dist %>/',
                        expand: true,
                        ext: '.html',
                        src: ['*.html']
                    }
                ]
            }
        },

        // sass
        sass: {
            dist: {
                options: {
                    outputStyle: 'nested',
                    sourceMap: false
                },
                files: {
                    '<%= paths.dist %>/css/style.css': '<%= paths.src %>/sass/style.scss'
                }
            }
        },

        // Configuration for minifying css-files
        cssmin: {
            options: {
                keepSpecialComments: 0
            },
            dist: {
                cwd: '<%= paths.dist %>/css/',
                dest: '<%= paths.dist %>/css/',
                expand: true,
                src: ['*.css'],
                ext: '.min.css'
            }
        },

        // Configuration for copying files
        copy: {
            fonts: {
                cwd: '<%= paths.src %>/fonts/',
                dest: '<%= paths.dist %>/fonts/',
                expand: true,
                src: ['**/*']
            }
        },

        // Configuration for optimizing image-files
        imagemin: {
            options: {
                optimizationLevel: 7
            },
            dist: {
                files: [
                    {
                        cwd: '<%= paths.src %>/images',
                        dest: '<%= paths.dist %>/images',
                        expand: true,
                        src: ['**/*.{jpg,jpeg,png,gif,ico}']
                    }
                ]
            }
        },

        // RequireJS
        requirejs: {
            compile: {
                options: {
                    baseUrl: '<%= paths.src %>/js/',
                    mainConfigFile: '<%= paths.src %>/js/_requireconfig.js',
                    include: [
                                '../../bower_components/requirejs/require.js'
                             ],
                    out: '<%= paths.dist %>/js/main.js',
                    preserveLicenseComments: false
                }
            }
        },

        // Configuration for livereload
        connect: {
            server: {
                options: {
                    base: '<%= paths.dist %>',
                    port: 3000,
                    useAvailablePort: true, // test
                    hostname: 'localhost',
                    livereload: true,
                    middleware: function (connect, options, middlewares) {
                        var fs = require('fs');
                        var path = require('path');
                        var support = ['POST', 'PUT', 'DELETE'];
                        middlewares.unshift(function (req, res, next) {
                            if (support.indexOf(req.method.toUpperCase()) != -1) {
                                var filepath = path.join(options.base[0], req.url);
                                if (fs.existsSync(filepath) && fs.statSync(filepath).isFile()) {
                                    return res.end(fs.readFileSync(filepath));
                                }
                            }
                            return next();
                        });
                        return middlewares;
                    }
                }
            }
        },

        //watch
        watch: {
            options: {
                livereload: true
            },
            templates: {
                files: ['<%= paths.src %>/assemble/pages/**/*.hbs', '<%= paths.src %>/assemble/**/*.{json,hbs}'],
                tasks: ['assemble', 'prettify']
            },
            js: {
                files: ['<%= paths.src %>/js/*.js'],
                tasks: ['requirejs']
            },
            request: {
                files: ['<%= paths.src %>/js/request/**/*.json'],
                tasks: ['copy:request']
            },
            scss: {
                files: ['<%= paths.src %>/sass/**/*.scss'],
                tasks: ['clean:css', 'sass', 'cssmin']
            },
            images: {
                files: ['<%= paths.src %>/images/*', '<%= paths.src %>/images/**/*.{jpg,jpeg,png,gif,ico}'],
                tasks: ['clean:images', 'imagemin']
            }
        },

    });

    // Load the plugin
    grunt.loadNpmTasks('grunt-contrib-clean');
    grunt.loadNpmTasks('grunt-contrib-copy');
    grunt.loadNpmTasks('grunt-assemble');
    grunt.loadNpmTasks('grunt-sass');
    grunt.loadNpmTasks('grunt-contrib-cssmin');
    grunt.loadNpmTasks('grunt-contrib-imagemin');
    grunt.loadNpmTasks('grunt-contrib-connect');
    grunt.loadNpmTasks('grunt-contrib-watch');
    grunt.loadNpmTasks('grunt-contrib-requirejs');
    grunt.loadNpmTasks('grunt-prettify');

    // Default task
    grunt.registerTask('default', ['dist']);

    // Dist task
    grunt.registerTask('dist', ['clean', 'assemble', 'prettify', 'requirejs', 'sass', 'cssmin', 'copy', 'imagemin', 'connect', 'watch']);

};